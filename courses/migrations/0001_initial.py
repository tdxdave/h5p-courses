# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-08-25 16:19
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('auth', '0008_alter_user_username_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('h5p', '0003_h5pfile_mime_type'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True, verbose_name='Title')),
                ('certificate_title', models.CharField(blank=True, max_length=400, verbose_name='Certificate Title')),
                ('is_enabled', models.BooleanField(default=True, verbose_name='Is Enabled')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='CourseLearnerStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('started', 'Started'), ('passed', 'Passed'), ('failed', 'Failed'), ('completed', 'Completed')], default='started', max_length=100, verbose_name='Status')),
                ('status_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('start_datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_datetime', models.DateTimeField(blank=True, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.Course')),
            ],
        ),
        migrations.CreateModel(
            name='CourseLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='CourseLibraryCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=200)),
                ('sort_order', models.IntegerField(default=0)),
                ('course_library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='courses.CourseLibrary')),
            ],
        ),
        migrations.CreateModel(
            name='CourseVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(max_length=16, verbose_name='Year')),
                ('content', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='h5p.H5PContent')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='courses.Course')),
            ],
        ),
        migrations.CreateModel(
            name='Learner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_title', models.CharField(blank=True, max_length=200, verbose_name='Job Title')),
                ('employee_type', models.CharField(blank=True, choices=[('professional', 'Professional'), ('non-professional', 'Non-professional'), ('default', 'Default')], max_length=100, verbose_name='Employee Type')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='learner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.Group')),
                ('org_type', models.CharField(choices=[('school', 'School'), ('municipality', 'Municipality'), ('private employer', 'Private Employer')], max_length=100, verbose_name='Organization Type')),
                ('training_year_start', models.DateField(verbose_name='Training Year Start')),
                ('organization_password', models.CharField(blank=True, max_length=256, null=True, verbose_name='Training Password')),
                ('billing_enabled', models.BooleanField(default=False, verbose_name='Billing Enabled')),
            ],
            bases=('auth.group',),
        ),
        migrations.CreateModel(
            name='OrganizationCourseLibrary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organization_library', to='courses.CourseLibrary')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_libraries', to='courses.Organization')),
            ],
        ),
        migrations.AddField(
            model_name='courselibrarycourse',
            name='course_version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='libraries', to='courses.CourseVersion'),
        ),
        migrations.AddField(
            model_name='courselearnerstatus',
            name='learner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.Learner', verbose_name='Learner'),
        ),
        migrations.AlterUniqueTogether(
            name='organizationcourselibrary',
            unique_together=set([('organization', 'course_library')]),
        ),
        migrations.AlterUniqueTogether(
            name='courselibrarycourse',
            unique_together=set([('course_version', 'course_library')]),
        ),
    ]
